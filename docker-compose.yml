version: '2'
services:
  db:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PW}
    ports:
      - 5432:5432
    volumes:
      - dictionary:/var/lib/postgresql/data 
    networks:
      - backend
  server:
    image: searchle/server:latest
    build:
      context: server
      dockerfile: webapi.Dockerfile
    ports:
      - 8080:80
    environment:
      - Searchle:DictionaryConnectionString=${DICTIONARY_CNN_STRING}
      - Searchle:RootKey=${ROOT_KEY}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
    networks:
      - backend
  frontend:
    image: searchle/frontend:latest
    build:
      context: frontend/src
      dockerfile: frontend.Dockerfile
    ports:
      - 4000:3000
    networks:
      - frontend
  nginx:
    image: nginx:1.23.1
    depends_on:
      - server
      - frontend
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./data/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    networks:
      - backend
      - frontend
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
networks:
  frontend:
  backend:
volumes:
  dictionary: